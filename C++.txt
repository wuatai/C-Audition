1.strcpy函数的编写？（memcpy函数的编写）(考点：内存重叠的情况)
	#include <assert.h>
	char * strcpy(char* dest,const char* source)
	{
		assert(dest != NULL && source != NULL);
		if(NULL == dest || NULL == source)
		{
			return NULL;
		}
		char * p = dest;
		size_t len = strlen(source);
		if(dest >= src && dest <= source + len)
		{
			p = p + len - 1;
			source = source + len - 1;
			for(size_t i = 0; i < strlen(source); i++)
			{
				*p-- = *source--;
			}
		}
		else
		{
			while(source != '\0')
			{
				*p++ = *source++;
			}
		}
		return dest;
	}
	
	//防止内存重叠需要从后往前复制
	void* memcpy(void* dest,const void* source,size_t count)
	{
		char *dp = (char*)dest;
		char *sp = (char*)source;
		if(NULL == dest || NULL == source)
		{
			return NULL;
		}
		if(dest > source && dest < source + count) //从后往前复制
		{
			dp = dp + count - 1;
			sp = sp + count - 1;
			while(count--)
			{
				*dp-- = *sp--;
			}
		}
		else
		{
			for(size_t i = 0; i < count ; i++)
			{
				*dp++ = *sp++;
			}
		}
		return dest;
	}
2.c++中四种类型转换机制
	例子：A是AA的基类
	static_cast<type>()： 1）完成基础数据类型，2）同一个继承体系中类型的转换 3）任意类型与空指针类型void*之间的转换。
		向上转型A a = static_cast<A>(aa);	//编译通过，子类对象可以变成父类对象，但是内存会被剪切
		向下转型AA aa = static_cast<AA>(a);	//编译不过,父类对象不能变成子类对象
		向上转型A *pa = static_cast<A*>(paa);	//编译通过，父类指针指向子类对象，正常的多态
		向下转型AA *paa = static_cast<AA*>(pa);	//编译通过，子类指针指向了父类对象，访问子类成员时不可预料
	dynamic_cast<type>()：主要用在继承体系中的安全向下转型。它能安全地将指向基类的指针转型为指向子类的指针或引用，并获知转型动作成功是否。转型失败会返回null（转型对象为指针时）或抛出异常（转型对象为引用时）。 只有在基类带有虚函数的情况下才允许将基类转换为子类
		（dynamic_cast类型必须是指针或者引用）
		向上转型AA* paa = dynamic_cast<AA*>(pa);	//编译通过，但是返回NULL，子类指针指向父类对象
		向下转型A* pa = dynamic_cast<A*>(paa);		//编译通过，且转换成功
		向下转型A& pa = dynamic_cast<A&>(*paa);		//编译通过，子类对象引用指向父类对象，数据会被截取
		向上转型AA& paa = dynamic_cast<AA&>(*pa);	//编译通过，但是引发了异常（所谓的安全转型）
	const_cast<type>()：增加或删除const属性。（const_cast类型必须是指针或者引用）
		const A *pa = new A();
		A& a = const_cast<A&>(*pa);
		a.a = 2;						//编译通过，可通过A来修改
	reinterpret_cast<type>()
3.继承机制中对象之间是如何转换的
4.继承机制中，引用和指针之间是如何转换的
	基类——>派生类：用dynamic_cast转换，首先检查基类指针（引用）是否真正指向一个派生类对象，然后再做相应处理，对指针进行dynamic_cast，成功返回派生类对象，失败返回空指针，对引用进行dynamic_cast，成功返回派生类对象，失败抛出一个异常。 
	派生类——>基类：可以用dynamic_cast或者直接进行类型转换（直接赋值）。
5.虚函数，虚函数表里面内存如何分配的
	虚函数表中包含类的虚函数，通过虚表指针访问，虚表指针在构造对象时生成。
6.STL中迭代器的作用，有指针为何还要迭代器
	通过迭代器能访问STL容器的内容，隐藏容器内部的实现，还能为算法和容器之间提供桥梁，使得算法和数据结构能够分开
7.STL中map与unordered_map
	map是STL的一个关联容器，内部自建一个红黑树，所以map内部所有的数据都是有序的，且map的查询、插入、删除操作复杂度都是O(logN)
	unorder_map底层是hash表，和map类似，可以通过key快速所引导value，不同的是unordered_map不会根据key的大小进行排序，存储时根据key的hash值判断元素是否相同，即unordered_map是无序的。
8.inline有什么用，STL用的多吗？
	inline节省开销，直接在编译期间将代码展开，又不会像宏一样导致语义错误，inline只是给编译器的建议，如果函数复杂，编译器会忽略。
9.vector扩容，map用的什么实现？
	vector如果容量不够，申请2倍（空间和时间的权衡）当前空间，拷贝旧空间到新内存，销毁旧空间。
	map用红黑树实现，查找存取时间复杂度logN
11.static用法
	1.全局静态变量：静态存储区，在整个程序运行期间一直存在，在声明他的文件之外是不可见的。
	2.局部静态变量：作用域仍为局部作用域，当定义它的函数或者语句块结束的时候，作用域结束。但是当局部静态变量离开作用域后，并没有销毁，而是仍然驻留在内存当中，只不过我们不能再对它进行访问，直到该函数再次被调用，并且值不变。
	3.静态函数：只是在声明他的文件当中可见，不能被其他文件所用。
	4.类的静态成员：属于该类的所有成员共有。
	5.类的静态成员函数：类的静态函数是该类的范畴内的全局函数，不能访问类的私有成员，只能访问类的静态成员，不需要类的实例即可调用。
12.const用法
	1.修饰成员变量 ：如果为指针，只有一个const，如果const位于*左侧，表示指针所指数据是常量，不能通过解引用修改该数据；
					只有一个const，如果const位于*右侧，表示指针本身是常量，不能指向其他内存地址；
					两个const，*左右各一个，表示指针和指针所指数据都不能修改。
	2.修饰函数参数：与变量一样
	3.修饰成员函数：const修饰的成员函数不能修改任何的成员变量
					const成员函数不能调用非const成员函数
	4.修饰函数返回值：返回值也必须赋给const data,non-const pointer
13.多态，虚函数，虚函数表，重写和重载区别
	多态：编译器多态（模板和重载），运行时多态（基类和派生类）
		是允许将父对象设置成为和一个和多个它的子对象相等的技术。包括重载和重写。重载为编译时多态，重写是运行时多态。
		通过继承同一个基类，产生了相关的不同的派生类，与基类中同名的成员函数在不同的派生类中会有不同的实现，也就是说：一个接口、多种方法。
	虚函数：虚函数的作用是允许在派生类中重新定义与基类同名的函数，并且可以通过基类指针或引用来访问基类和派生类中的同名函数。
	虚函数表：用来访问虚函数，虚函数是存放在虚函数表中的。
	重载：是指同一可访问区内被声明的几个具有不同参数列（参数的类型，个数，顺序不同）的同名函数，根据参数列表确定调用哪个函数，重载不关心函数返回类型。
	隐藏：是指派生类的函数屏蔽了与其同名的基类函数，注意只要同名函数，不管参数列表是否相同，基类函数都会被隐藏。
	重写(覆盖)：是指派生类中存在重新定义的函数。其函数名，参数列表，返回值类型，所有都必须同基类中被重写的函数一致。只有函数体不同（花括号内），派生类调用时会调用派生类的重写函数，不会调用被重写函数。重写的基类中被重写的函数必须有virtual修饰。
15.c++11一些特性
	1.统一的初始化：C++11支持对于所有的内置类型和用户定义类型使用大括号方式的初始化列表，使用初始化列表时，可以添加等号，也可以没有。
	2.智能指针：C++11中的智能指针包括三种：std::unique_ptr、std::shared_ptr和std::weak_ptr。 这三种智能指针都是模板类，每个实例化的智能指针对象都是一个用于管理裸指针的栈对象，
		通过栈对象的自动释放，实现对上资源的自动释放，有效防止内存泄露。
	3.Lambda函数：实际上是一个闭包（closure），类似于一个匿名的函数，拥有捕获所在作用域中变量的能力，能够将函数做为对象一样使用，通常用来实现回调函数、代理等功能。Lambda表达式是函数式编程的基础。
		// Lambda表达式
		auto lambda = [](int a)->int{ return a; };	//例子1
		sort(words.begin(),word2.end(),[](cosnt string& a,const string& b){
			return a.size()<b.size();
		});						//例子2
	4.包装器std::function,std::function是对C++中各种可调用实体（普通函数、Lambda表达式、函数指针、以及其它函数对象等）的一个统一封装，形成一个新的统一可调用对象（std::function对象）（主要是对模板化编程很有意义）。
		例子
#include <functional>
#include <iostream>
using namespace std;

std::function< int(int)> Functional;	//包装器

// 普通函数
int TestFunc(int a)
{
    return a;
}

// Lambda表达式
auto lambda = [](int a)->int{ return a; };

// 仿函数(functor)
class Functor
{
public:
    int operator()(int a)
    {
        return a;
    }
};

// 1.类成员函数
// 2.类静态函数
class TestClass
{
public:
    int ClassMember(int a) { return a; }
    static int StaticMember(int a) { return a; }
};

int main()
{
    // 普通函数->包装器
    Functional = TestFunc;
    int result = Functional(10);
    cout << "普通函数："<< result << endl;

    // Lambda表达式->包装器
    Functional = lambda;
    result = Functional(20);
    cout << "Lambda表达式："<< result << endl;

    // 仿函数->包装器
    Functor testFunctor;
    Functional = testFunctor;
    result = Functional(30);
    cout << "仿函数："<< result << endl;

    // 类成员函数->包装器
    TestClass testObj;
    Functional = std::bind(&TestClass::ClassMember, testObj, std::placeholders::_1);
    result = Functional(40);
    cout << "类成员函数："<< result << endl;

    // 类静态函数->包装器
    Functional = TestClass::StaticMember;
    result = Functional(50);
    cout << "类静态函数："<< result << endl;

    return 0;
}
16.手写C++实现一个STL里面的功能
#include<iostream>
using namespace std;
template<typename T>
class Myvector
{
public:
	Myvector()
	{
		data=NULL;
		capacity=size=0;
	}
	Myvector(const Myvector& other)
	{
		if(this==&other)
			return;
		data=new T[other.size];
		for(int i=0; i<size; i++)
			data[i]=other[i];
		
		capacity=other.capacity;
		size=other.size;	
	}
	T& operator[](int index)
	{
		if(index>=size)
		{
			cout<<"Overflow!"<<endl;
		}
		return data[index];
	}
	const Myvector& push_back(const T temp)
	{
		if(size>=capacity)
		{
			T* newData=new T[capacity*2+1];
			memmove(newData,data,size*sizeof(T));
			delete[] data;
			data=newData;
			capacity=capacity*2+1;
		}
		data[size++]=temp;
		return *this;
	}
    unsigned int GetSize()
	{
		return size;
	}
	unsigned int GetCapacity()
	{
		return capacity;
	}
private:
	T* data;
	unsigned int capacity;
	unsigned int size;
};
class T
{
public:
	T(int a=0):b(a)
	{
	}
 
	int b;
};
 
void main()
{
	Myvector<T> tvec;
	tvec.push_back(T(1));
	cout<<tvec.GetSize()<<endl;
	cout<<tvec.GetCapacity()<<endl;
	tvec.push_back(T(2));
    cout<<tvec.GetSize()<<endl;
	cout<<tvec.GetCapacity()<<endl;
	tvec.push_back(T(3));
	cout<<tvec.GetSize()<<endl;
	cout<<tvec.GetCapacity()<<endl;
	tvec.push_back(T(4));
    cout<<tvec.GetSize()<<endl;
	cout<<tvec.GetCapacity()<<endl;
	tvec.push_back(T(5));
	cout<<tvec.GetSize()<<endl;
	cout<<tvec.GetCapacity()<<endl;
	cout<<"输出元素："<<endl;
	cout<<tvec[0].b<<endl;
	cout<<tvec[1].b<<endl;
	cout<<tvec[2].b<<endl;
	cout<<tvec[3].b<<endl;
	cout<<tvec[4].b<<endl;
}
17.构造函数和析构函数调用顺序
	基类构造函数->子类构造函数->子类析构函数->基类析构函数
	因为子类构造函数成员的初始化有可能需要基类的。
18.为什么要用虚析构函数
	如果派生类中申请了内存空间，并在其析构函数中对这些内存空间进行释放。假设基类中采用的是非虚析构函数，
	当删除基类指针指向的派生类对象时就不会触发动态绑定，因而只会调用基类的析构函数，而不会调用派生类的析构函数。
	那么在这种情况下，派生类中申请的空间就得不到释放从而产生内存泄漏。
19.const vector<int> 和vector <const int>的区别
	const在前面，修饰的是vector，vector通过取下表不能修改vector内部元素，但是通过迭代器可以。
20.new,delete和malloc，free的区别
	1.new和delete是C++关键字，需要编译器支持。malloc/free是库函数，需要头文件支持
	2.new申请内存无需指定内存块大小，malloc需要指定。
	3.分配失败，new抛异常，malloc返回NULL。
	4.new和delete可以为自定义类型做构造和析构工作。malloc/free是库函数，不行
21.struct和union的区别，struct如果里面存了double，int，short请问这个struct有几个字节，怎么存储的
	1.但在任何同一时刻， 共用体只存放一个被选中的成员， 而结构体则存放所有的成员变量。
	2.对于共用体的不同成员赋值，将会对其他成员重写， 原来成员的值就不存在了， 而对于结构体的不同成员赋值是互不影响的。
	3.union的大小为其内部所有变量的最大值，按照最大类型的倍数进行分配大小；结构体分配方式类似，但还跟顺序有关。
23.如何禁止自动生成拷贝构造函数？
	1.声明一个私有拷贝构造函数 
	2.继承一个uncopyable类
24.虚函数的内存结构，那菱形继承的虚函数内存结构呢
	1. 每个类都有虚指针和虚表；
	2. 如果不是虚继承，那么子类将父类的虚指针继承下来，并指向自身的虚表（发生在对象构造时）。有多少个虚函数，虚表里面的项就会有多少。多重继承时，可能存在多个的基类虚表与虚指针；
	3. 如果是虚继承，那么子类会有两份虚指针，一份指向自己的虚表，另一份指向虚基表，多重继承时虚基表与虚基表指针有且只有一份。
25.基类的析构函数为什么需要是虚函数
	答：new出来的是子类son的对象，采用一个父类father的指针来接收，故在析构的时候，编译器因为只知道这个指针是父类的，
	所以只将父类部分的内存析构了，而不会去析构子类的内存，就造成了内存泄露。基类析构函数定义为虚拟函数的时候，在子
	类的对象的首地址开始会有一块基类的虚函数表拷贝，在析构子类对象的时候会删除此虚函数表，此时会调用基类的析构函数，
	所以此时内存是安全的。
26.构造函数可以是虚函数吗？（编译不通过）
	答：虚函数的执行依赖于虚函数表。而虚函数表在构造函数中进行初始化工作，即初始化vptr，让他指向正确的虚函数表。
	而在构造对象期间，虚函数表还没有被初始化，将无法进行。
27.成员函数可以调用delete this吗？为什么？
	可以通过编译，如果不在delete this之后调用成员函数，那就没有任何问题，如果调用了成员函数，那就会出错，因为已经没有这个对象的成员了。
	但是不通过new建立的对象，是可以的。
29.为何static成员函数不能为virtual？（编译不通过）
	答：虚函数依靠vptr和vtable来处理。vptr是一个指针，在类的构造函数中创建生成，并且只能用this指针来访问它，因为它是
	类的一个成员，并且vptr指向保存虚函数地址的vtable.对于静态成员函数，它没有this指针，所以无法访问vptr. 这就是为何
	static函数不能为virtual.
	虚函数的调用关系：this -> vptr -> vtable ->virtual function
30.内联函数可以是虚函数吗？（编译能通过）
	答：inline是在编译器将函数类容替换到函数调用处，是静态编译的。而虚函数是动态调用的，在编译器并不知道需要调用的是
	父类还是子类的虚函数，所以不能够inline声明展开，所以编译器会忽略。
31.正确区分重载、重写和隐藏
	答：注意三个概念的适用范围：处在同一个类中的函数才会出现重载。处在父类和子类中的函数才会出现重写和隐藏。
	重载：同一类中，函数名相同，但参数列表不同。
	重写：父子类中，函数名相同，参数列表相同，且有virtual修饰。
	隐藏：父子类中，函数名相同，参数列表相同，但没有virtual修饰；函数名相同，参数列表不同，无论有无virtual修饰都是隐藏。
32.如何定义一个只能在栈上或者堆上生成对象的类？
	只能在栈上：重写一个new操作符，并定义成私有的。
	只能在堆上：析构函数定义成私有的。
33.sizeof(类)，如何计算类的大小？
	1.没内容的时候是1，早期的是0，但是会与紧接在后面的内存具有相同的地址，所以编译器后来改成了1；
	2.成员大小+虚表指针。
	3.内存对齐。
34.sizeof(结构体)，如何计算结构体的大小？
	与sizeof(类)一样。
35.结构体和类有什么区别？
36.extern“C”有什么作用？原理是什么？
	作用：主要是为了实现c++和c语言所写的不同模块间的互相调用而设计的
	原理：包含c头文件时候的extern “C"关键字，如果不包含这个，在连接生成可执行文件的时候连接器会在obj文件中寻找_add_int_int，
	当然不可能在cadd.obj文件中找到，而如果加了extern "C"关键字，展开了其实就是extern “C” int add(int a, int b)（加了花括号
	可以将花括号中所有的声明都变为extern “C”的），说明查找add符号的时候需要按照c的生成名字方式进行查找，就是查找_add(int a, int b)。
37.const修饰的变量和#define有什么区别？
	1.define是在预处理阶段展开，const常量是编译运行阶段使用
	2.define没有类型，不能做类型检查，const有具体类型，编译阶段会执行类型检查
	3.define仅仅是展开，不会分配内存，const要分配内存
39.volitale什么作用？
	该关键字的作用是防止优化编译器把变量从内存装入CPU寄存器中。
	当要求使用 volatile 声明的变量的值的时候，系统总是重新从它所在的内存读取数据，即使它前面的指令刚刚从该处读取过数据。而且读取的数据立刻被保存
41.指针和引用的区别？
	1.指针是一个实体，需要分配内存空间。引用只是变量的别名，不需要分配内存空间。
	2.引用在定义的时候必须进行初始化，并且不能够改变。指针在定义的时候不一定要初始化，并且指向的空间可变。（注：不能有引用的值不能为NULL）
	3.有多级指针，但是没有多级引用，只能有一级引用。
	4.指针和引用的自增运算结果不一样。（指针是指向下一个空间，引用时引用的变量值加1）
	5.sizeof 引用得到的是所指向的变量（对象）的大小，而sizeof 指针得到的是指针本身的大小。
	6.引用访问一个变量是直接访问，而指针访问一个变量是间接访问。
45.面向对象的三大特性
	1.封装
		所谓封装，就是将客观事物封装成抽象的类，并且类可以把数据和方法让可信的类或者对象进行操作，对不可信的类或者对象进行隐藏。类就是封装数据和操作这些数据代码的逻辑实体。在一个类的内部，某些属性和方法是私有的，不能被外界所访问。通过这种方式，对象对内部数据进行了不同级别的访问控制，就避免了程序中的无关部分的意外改变或错误改变了对象的私有部分。
	2.继承
		继承有这样一种能力，就是能使用现有的类的所有功能，并无须重新编写原来的这些类的基础上对这些功能进行扩展。通过继承创建的新类称为子类或派生类，被继承的称为基类。继承有两种，一种是实现继承，另外一种是接口继承。实现继承可以直接使用基类的属性和方法而无需额外编码，接口继承是指使用属性和方法的名称，但是子必须提供实现的能力。  
	3.多态
		所谓多态就是对一个实例的相同方法在不同的情形下有不同的表现形式。多态机制使得不同内部结构的对象可以共享相同的外部接口，这就意味着，虽然不同的类的内部操作不同，但可以通过一个公共的类，它们可以通过相同的方式予以调用。
45.面向对象的五大基本原则
	1.单一职责原则，指一个类的功能要单一，不能包罗万象。
	2.替换原则。指子类可以替换父类并出现在父类能出现的任何地方。比如公司搞年会，所有员工都能参与抽奖，不管是新员工，还是老员工。
	3.开放封闭原则，一个模块在更改性方面应该是封闭的（接口不变，实现改变），在扩展性方面应该是开放的（父类到子类）。比如一个网络模块，原先只有服务端的功能，现在我要加入客户端的功能。
	4.依赖倒置原则：面向接口编程。抽象指的是接口或抽象类，细节就是具体的实现类，使用接口或者抽象类的目的是制定好规范和契约，
     而不去涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成。
	 注意：
		在代码中传递参数或关联关系时，尽量引用高层的抽象层类，即使用接口和抽象类进行变量声明、参数类型声明、
        方法返回类型声明以及数据类型的转换；
		当一个对象和其他对象有依赖关系时，可以利用依赖注入的方法将类之间进行解耦，主要有：构造注入、Set方法注入
        和接口注入；
		开闭是原则，里氏是基础，依赖倒置是手段；
		低层模块尽量都要有抽象类或接口，或者两者都有；
		变量的声明类型尽量是抽象类或接口；
		使用继承时遵循里氏替换原则。
	5.接口隔离原则：不同的模块要通过抽象接口隔离开，而不是通过具体的类强耦合。
	6.组合复用原则：尽量使用对象组合，而不是继承来达到复用的目的。该原则就是在一个新的对象里面使用一些已有的对象，使之成为新对象的一部分：新的对象通过向这些对象的委派达到复用已有功能的目的。
47.如何检查内存泄漏？（https://www.cnblogs.com/skynet/archive/2011/02/20/1959162.html）
	内存泄漏指由于疏忽或错误造成程序未能释放已经不再使用的内存的情况。
	VS下：
		#define CRTDBG_MAP_ALLOC
		#include <stdlib.h>
		#include <crtdbg.h>

		int main(void)
		{
		#define new  new(_CLIENT_BLOCK, __FILE__, __LINE__) //添加这一句
			int a = 10;
			int* leak = new int[10];
			_CrtDumpMemoryLeaks();
			return 0;
		}
	Linux下：
		mtrace
		#include <iostream>
		#include <mcheck.h>
		#include <stdlib.h>
		using namespace std;
		int main()
		{
			setenv("MALLOC_TRACE","output",1);
			mtrace();
			int *p1=new int;
			int *p2=new int;
			int *p3=(int*)malloc(sizeof(int));
			int *p4=(int*)malloc(sizeof(int));

			delete p1;
			free(p3);
			return 0;
		}
48.从源代码到可执行二进制文件，要经过哪些过程？
	1.编译预处理（宏定义、条件编译指令#if/#endif、头文件包含指令）
	2.编译阶段（将代码翻译成汇编代码）
	3.优化阶段（中间代码的优化（软件优化）、针对目标代码生成的优化（硬件优化））
	4.汇编过程（将汇编语言翻译成机器指令）
	5.链接程序（将有关的目标文件彼此相连）
49.C++中不能重载的运算符：“?:”、“.”、“::”、“sizeof”和”.*”
51.什么情况会导致栈溢出，内存泄漏
	内存溢出：程序在申请内存时，没有足够的内存空间供其使用。
	内存泄露：是指程序在申请内存后，无法释放已申请的内存空间，占用有用内存。
	栈溢出：栈的空间就1~2M，如果申请的空间大于容量，写入的时候就会造成栈溢出。恶意程序覆盖掉
		有用的代码，执行恶意程序造成攻击损失。
		可能原因：访问越界（读数组下标越界）由于分配了过大的局部变量引起。
				  递归层次太深，导致栈保存不了，栈溢出。可能是由于循环的递归引起的。