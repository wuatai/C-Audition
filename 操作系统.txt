2.进程和线程区别
	进程是系统进行资源分配和调度的一个独立单位。线程是进程的一个实体，是CPU调度和分派的基本单位，它是比进程更小的能独立运行的基本单位。
3.内存分配方式，内存模型，虚拟内存和物理内存区别
4.select、epoll 的区别，在使用和性能上有什么区别，当只有一个 tcp 客户端时，哪种机制效率更高，有没有看过实现的源码
5.两个进程如何共享 socket、子进程调用 execve 时如何共享 socket
6.说说系统调用的实现原理，参数怎么传
7.对多线程和多进程使用多吗？死锁的4个条件，同步的4种方式？
8.堆和栈的区别？哪个是向高地址的
9.进程死锁的四个条件
答。死锁的原因：系统资源不足，进程运行推进的顺序不合适，资源分配不当等
	死锁的四个必要条件：
	1.互斥条件：每个资源要么已经分配给了一个进程，要么就是可用的
	2.占有和等待条件：已经得到了某个资源的进程可以请求新的资源
	3.不可抢占条件：已经分配出去的资源不能被强制性的抢占，只能自己显式释放
	4.环路等待条件：存在多个进程组成环路，每个进程都在等待下一个进程所占有的资源
10.多线程和多进程的区别，怎么抉择
11.进程通信的方式
12.段内存管理
13.Windows下的内存是如何管理的？
	Windows提供了3种方法来进行内存管理：
		虚拟内存，最适合用来管理大型对象或者结构数组；
		内存映射文件，最适合用来管理大型数据流（通常来自文件）以及在单个计算机上运行多个进程之间共享数据；
		内存堆栈，最适合用来管理大量的小对象。
14.Windows消息调度机制是？
	消息队列
15.中断和轮询的特点
	程序轮询：不断询问I/O设备有无处理请求，占据了CPU相当一部分处理时间，因此，程序轮询是一种效率较低的方式，在现代计算机系统中已很少应用。
　　程序中断通常简称中断，是指CPU在正常运行程序的过程中，由于预先安排或发生了各种随机的内部或外部事件，使CPU中断
		正在运行的程序，而转到为响应的服务程序去处理。
　　轮询——效率低，等待时间很长，CPU利用率不高。
　　中断——容易遗漏一些问题，CPU利用率高。
16.临界资源，临界区
	临界资源是一次仅允许一个进程使用的共享资源。各进程采取互斥的方式，实现共享的资源称作临界资源。属于临界资源的硬件有，打印机，磁带机等；
		软件有消息队列，变量，数组，缓冲区等。诸进程间采取互斥方式，实现对这种资源的共享。
	每个进程中访问临界资源的那段代码称为临界区（criticalsection），每次只允许一个进程进入临界区，进入后，不允许其他进程进入。
		不论是硬件临界资源还是软件临界资源，多个进程必须互斥的对它进行访问。多个进程涉及到同一个临界资源的的临界区称为相关临界区。
		使用临界区时，一般不允许其运行时间过长，只要运行在临界区的线程还没有离开，其他所有进入此临界区的线程都会被挂起而进入等待状态，
		并在一定程度上影响程序的运行性能。
17.分段和分页
	页是信息的物理单位，分页是为实现离散分配方式，以消减内存的外零头，提高内存的利用率；或者说，分页仅仅是由于系统管理的需要，而不是用户的需要。
　　段是信息的逻辑单位，它含有一组其意义相对完整的信息。分段的目的是为了能更好的满足用户的需要。
　　页的大小固定且由系统确定，把逻辑地址划分为页号和页内地址两部分，是由机器硬件实现的，因而一个系统只能有一种大小的页面。段的长度却不固定，决定于用户所编写的程序，通常由编辑程序在对源程序进行编辑时，根据信息的性质来划分。
　　分页的作业地址空间是一维的，即单一的线性空间，程序员只须利用一个记忆符，即可表示一地址。分段的作业地址空间是二维的，程序员在标识一个地址时，既需给出段名，又需给出段内地址。
18.说出你所知道的保持进程同步的方法？
	进程间同步的主要方法有原子操作、信号量机制、自旋锁、管程、会合、分布式系统等。
19.Linux文件属性有哪些
	-rw-r--r--那个是权限符号，总共是- --- --- ---这几个位。
　　第一个短横处是文件类型识别符：-表示普通文件；c表示字符设备（character）；b表示块设备（block）；d表示目录（directory）；
	l表示链接文件（link）；后面第一个三个连续的短横是用户权限位（User），第二个三个连续短横是组权限位（Group），第三个三个连续短横是其他权限位（Other）。
	每个权限位有三个权限，r（读权限），w（写权限），x（执行权限）。如果每个权限位都有权限存在，那么满权限的情况就是：-rwxrwxrwx；权限为空的情况就是- --- --- ---
20.简术OSI的物理层Layer1，链路层Layer2，网络层Layer3的任务
	网络层：通过路由选择算法，为报文或分组通过通信子网选择最适当的路径。
　　链路层：通过各种控制协议，将有差错的物理信道变为无差错的、能可靠传输数据帧的数据链路。
　　物理层：利用传输介质为数据链路层提供物理连接，实现比特流的透明传输。
21.什么是中断？中断时CPU做什么工作？
	中断是指在计算机执行期间，系统内发生任何非寻常的或非预期的急需处理事件，使得CPU暂时中断当前正在执行的程序而转去执行相应的事件处理程序。
	待处理完毕后又返回原来被中断处继续执行或调度新的进程执行的过程。
22.进程间通信方式：（https://www.ibm.com/developerworks/cn/linux/l-ipc/index.html）
	首先：每个进程各自有不同的用户地址空间,任何一个进程的全局变量在另一个进程中都看不到，所以进程之间要交换数据必须通过内核,在内核中开辟一块缓冲区,进程A把数据从用户空间拷到内核缓冲区,进程B再从内核缓冲区把数据读走,内核提供的这种机制称为进程间通信。
	1.管道（Pipe）及有名管道（named pipe）：管道可用于具有亲缘关系进程间的通信，有名管道克服了管道没有名字的限制，因此，除具有管道所具有的功能外，它还允许无亲缘关系进程间的通信；
		管道只允许具有血缘关系的进程间通信，如父子进程间的通信。
		管道只允许单向通信。
		管道内部保证同步机制，从而保证访问数据的一致性。
		面向字节流。
		管道随进程，进程在管道在，进程消失管道对应的端口也关闭，两个进程都消失管道也消失。
	2.信号（Signal）：信号是比较复杂的通信方式，用于通知接受进程有某种事件发生，除了用于进程间通信外，进程还可以发送信号给进程本身；linux除了支持Unix早期信号语义函数sigal外，还支持语义符合Posix.1标准的信号函数sigaction（实际上，该函数是基于BSD的，BSD为了实现可靠信号机制，又能够统一对外接口，用sigaction函数重新实现了signal函数）；
	3.报文（Message）队列（消息队列）：消息队列是消息的链接表，包括Posix消息队列system V消息队列。有足够权限的进程可以向队列中添加消息，被赋予读权限的进程则可以读走队列中的消息。消息队列克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限等缺点。
	4.共享内存：使得多个进程可以访问同一块内存空间，是最快的可用IPC形式。是针对其他通信机制运行效率较低而设计的。往往与其它通信机制，如信号量结合使用，来达到进程间的同步及互斥。
	5.信号量（semaphore）：主要作为进程间以及同一进程不同线程之间的同步手段。
		信号量本质上是一个计数器，它不以传送数据为主要目的，它主要是用来保护共享资源（信号量也属于临界资源），使得资源在一个时刻只有一个进程独享。
	6.套接口（Socket）：更为一般的进程间通信机制，可用于不同机器之间的进程间通信。起初是由Unix系统的BSD分支开发出来的，但现在一般可以移植到其它类Unix系统上：Linux和System V的变种都支持套接字。