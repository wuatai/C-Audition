一、排序算法
1.为什么要学习O(n^2)的排序算法
	基础，编码简单，易于实现，是一些简单情景的首选
	在一些特殊情况下，简单的排序算法更有效
	简单的排序算法思想衍生出复杂的排序算法
	作为子过程，改进更复杂的排序算法
1.1 选择排序 Selection Sort	O(n^2)
	基本思想，将数据分为有序和无序两部分，先找到最小的元素，和没排序部分的第一个位置交换位置
	然后从没排序的部分找到最小的，与第一个无序部分交换，则有序部分不断扩充，无序部分不断减少，
	直到无序部分没有数据，结束。
	代码：
	#include <iostream>
	#include <algorithm>
	using namespace std;
	template <typename T>
	void selectionSort(T arr[] , int n)
	{
		for(int i = 0; i < n; i++)
		{
			//寻找[i,n)区间里的最小值
			int minIndex = i;
			for(int j = i+1;j < n;j++)
			{
				if(arr[j] < arr[minIndex])
				{
					minIndex = j;
				}
			}
			swap(arr[i],arr[minIndex]);
		}
	}
	int main()
	{
		int a[10] = {10,9,8,7,6,5,4,3,2,1};
		selectionSort(a,10);
		for(int i = 0; i < 10; i++)
			cout << a[i] << endl;
			
		string c[4] = {"D","C","B","A"};
		selectionSort(c,4);
		for(int i = 0; i < 10; i++)
			cout << c[i] << endl;
			
		Student d[4] = { {"D",90}, {"C",30}, {"B",50}, {"A",80} };
		selectionSort(d,4);
		for(int i = 0; i < 10; i++)
			cout << d[i] << endl;
			
		return 0;
	}
	上面的程序只能对int数组排序，下面用模板来泛化
	struct Student
	{
		string name;
		int score;
		bool operator<(const Student &otherStudent)
		{
			return score < otherStudent.score;
		}
		friend ostream& operator<<(ostream &os,const Student &student)
		{
			os<<"Student: "<<student.name<<" "<<student.score<<endl;
			return os;
		}
	};
	
	随机生成算法测试用例
	#include <ctime>
	#include <iostream>
	#include <cassert>
	using namespace std;
	namespace SortTestHelper
	{
		//生成n个在RangeL和RangeR之间的元素的随机数组
		int* generateRandomArray(int n,int rangeL, rangeR)
		{
			assert(rangeL <= rangeR);
			int *arr = new int[n];
			srand(time(NULL));
			for(int i = 0;i < n;i++)
			{
				//生成随机数
				arr[i] = rand() % (rangeR - rangeL + 1) + rangeL;
			}
			return arr;
		}
		
		template<typename T>
		void printArray(T arr[], int n)
		{
			for(int i = 0;i < n;i++)
				cout << arr[i] << " ";
			cout << endl;
			return;
		}
		
		int* copyIntArray(int a[],int n)
		{
			int* arr = new int[n];
			copy(a,a+n,arr);
			return arr;
		}
	}
	
	int n = 10000;
	int *arr = SortTestHelper::generateRandomArray(n,0,n);
	selectionSort(arr,n);
	SortTestHelper::printArray(arr,n);
	delete[] arr;
	
	测试算法的性能
	namespace SortTestHelper
	{
		//计算程序运行时间
		template<tyepname T>
		void testSort(string sortName,void(*sort)(T[],int),T arr[],int n)
		{
			clock_t startTime = clock();
			sort(arr,n);
			clock_t endTime = clock();
			assert(isSorted(arr,n));
			cout << sortName<<" :" << double(endTime - startTime) / CLOCKS_PRE_SEC << "s" << endl;
			return;
		}
		//测试排序是否成功
		template<typename T>
		bool isSorted(T arr[], int n)
		{
			for(int i = 0; i < n - 1; i++)
				if(arr[i] > arr[i + 1])
					return false;
			return true;
		}
	}
	
	int main()
	{
		int n = 10000;
		int *arr = SortTestHelper::generateRandomArray(n,0,n);
		SortTestHelper::testSort("Selection Sort",selectionSort,arr,n);
	}
	
1.2 插入排序
	算法思想：一个序列分无序和有序，初始的时候序列第一个是有序的，后面的都是无序的
	从第二个开始，将其分别和有序的数据对比，交换，直到插入到了合适的位置。（扑克牌）
	
	代码：
	#include <iostream>
	#include <algorithm>
	#include "SortTestHelper.h"
	#include "SelectionSort.h"
	
	using namespace std;
	
	template<typename T>
	void insertionSort(T arr[], int n)
	{
		for(int i = 1; i < n; i++)
		{
			//寻找第i个元素的插入位置
			for(int j = i; j > 0; j--)
			{
				if(arr[j] < arr[j-1])
				{
					swap(arr[j],arr[j-1]);
				}
				else
				{
					break;
				}
			}
		}
	}
	
	简洁版：
	
	template<typename T>
	void insertionSort(T arr[], int n)
	{
		for(int i = 1; i < n; i++)
		{
			//寻找第i个元素的插入位置
			for(int j = i; j > 0 && arr[j] < arr[j-1]; j--)
			{
				swap(arr[j],arr[j-1]);
			}
		}
	}
	
	测试：
	int main()
	{
		int n = 10000；
		int *arr = SortTestHelper::generateRandomArray(n,0,n);
		int *arr2 = SortTestHelper::copy(arr,n);
		
		SortTestHelper:testSort("Insertion Sort",insertionSort,arr,n);
		a=SortTestHelper::testSort("Selection Sort",selectionSort,arr2,n);
		
		delete[] arr;
		delete[] arr2;
		return 0;
	}
	
	改进版插入排序
	思想，先把无序的元素保存下来，用赋值替换swap
	template<typename T>
	void insertionSort(T arr[], int n)
	{
		T e = arr[i];
		for(int i = 1; i < n; i++)
		{
			//寻找第i个元素的插入位置
			for(int j = i; j > 0 && arr[j-1] > e; j--)
			{
				arr[j]=arr[j-1];
			}
			arr[j] = e;
		}
	}
小结：
O(n^2)的排序算法：
选择排序，插入排序，冒泡排序，希尔排序（O(n^1.3-2)）
对于近乎有序的数组，插入排序特别快，有可能比nlogn还快。

下面介绍O(n*logn)的排序算法
1.3 归并排序
	算法思想：将序列分成2部分，分别排序，然后合并。
	合并的时候需要另外一个数组，和三个指针，分别指向新数组，左边有序数组和右边有序数组。
	
	代码：
	//合并,将arr[l...mid]和arr[mid+1...r]两部分进行归并
	template<typename T>
	void __merge(T arr[], int l,int mid, int r)
	{
		T aux[r-l+1];
		for(int i = l;i <= r;i++)
		{
			aux[i-l] = arr[i];
		}
		int i = l,j=mid + 1;
		for(int k = l;k <= r;k++)
		{
			if(i > mid)
			{
				arr[k] = aux[j-l];
				j++;
			}
			else if(j > r)
			{
				arr[k] = aux[i-l];
				i++;
			}
			else if(aux[i-l] < aux[j-l])
			{
				arr[k] = aux[i-l];
				i++;
			}
			else
			{
				arr[k] = aux[j-l];
				j++;
			}
		}
	}
	
	// 递归使用归并排序，对arr[l...r]的范围进行排序
	template<typename T> 
	void __mergeSort(T arr[],int l,int r)
	{
		if(l >= r)
			return;
		int mid = (l + r) / 2;
		__mergeSort(arr,l,mid);
		__mergeSort(arr,mid+1,r);
		__merge(arr,l,mid,r);
	}
	
	template<typename T>
	void mergeSort(T arr[],int n)
	{
		__mergeSort(arr,0,n-1);
	}
	
	归并排序需要利用额外的辅助空间来存储。